<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lost Planet</title>
  
  
  <link href="https://ambitionfy.github.io/atom.xml" rel="self"/>
  
  <link href="https://ambitionfy.github.io/"/>
  <updated>2020-12-28T06:30:12.088Z</updated>
  <id>https://ambitionfy.github.io/</id>
  
  <author>
    <name>房房爱学习</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020.12.28无题</title>
    <link href="https://ambitionfy.github.io/2020/12/28/2020.12.28/"/>
    <id>https://ambitionfy.github.io/2020/12/28/2020.12.28/</id>
    <published>2020-12-28T06:30:00.000Z</published>
    <updated>2020-12-28T06:30:12.088Z</updated>
    
    <content type="html"><![CDATA[<div align="center">谁还没个脾气呢？</div>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;谁还没个脾气呢？&lt;/div&gt;</summary>
      
    
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2020.12.25无题</title>
    <link href="https://ambitionfy.github.io/2020/12/25/2020.12.25/"/>
    <id>https://ambitionfy.github.io/2020/12/25/2020.12.25/</id>
    <published>2020-12-25T03:00:00.000Z</published>
    <updated>2020-12-25T02:47:05.278Z</updated>
    
    <content type="html"><![CDATA[<div align="center">孤独是一种心态，孤单是一种状态。</div>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;孤独是一种心态，孤单是一种状态。&lt;/div&gt;</summary>
      
    
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2020.12.14无题</title>
    <link href="https://ambitionfy.github.io/2020/12/14/2020.12.14/"/>
    <id>https://ambitionfy.github.io/2020/12/14/2020.12.14/</id>
    <published>2020-12-14T15:46:00.000Z</published>
    <updated>2020-12-18T04:20:45.160Z</updated>
    
    <content type="html"><![CDATA[<div align = "center">看着自己的头发一点点变长是一件很幸福的事。</div>]]></content>
    
    
      
      
    <summary type="html">&lt;div align = &quot;center&quot;&gt;看着自己的头发一点点变长是一件很幸福的事。&lt;/div&gt;

</summary>
      
    
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2020.12.11无题</title>
    <link href="https://ambitionfy.github.io/2020/12/11/2020.12.11/"/>
    <id>https://ambitionfy.github.io/2020/12/11/2020.12.11/</id>
    <published>2020-12-11T15:30:21.000Z</published>
    <updated>2020-12-18T04:20:34.175Z</updated>
    
    <content type="html"><![CDATA[<ol><li>虽然我们都清楚自己是普通人，但是有时候还是希望自己是某个人心中特别的存在。 </li></ol><ol start="2"><li>儿时期冀成年后的时光，成年后期冀立业后的时光。可能于我而言，最美好的时候永远是未来，而不是现在。</li></ol><ol start="3"><li>发现自己越来越像爸爸了，一样的严肃深沉。虽然难以评判其好坏，但确实让我丢了一份属于这个时期的天真与烂漫。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;虽然我们都清楚自己是普通人，但是有时候还是希望自己是某个人心中特别的存在。 &lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;儿时期冀成年后的时光，成年后期冀立业后的时光。可能于我而言，最美好的时候永远是未来，而不是现在。&lt;/li&gt;
&lt;/ol&gt;
&lt;o</summary>
      
    
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://ambitionfy.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>机器学习一：K-近邻算法</title>
    <link href="https://ambitionfy.github.io/2020/12/11/test1/"/>
    <id>https://ambitionfy.github.io/2020/12/11/test1/</id>
    <published>2020-12-10T16:05:06.000Z</published>
    <updated>2020-12-10T16:14:16.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1.算法描述"></a>1.算法描述</h3><ol><li>计算已知训练集中各点距离该测试点距离（2-范数）</li><li>按照所得距离增序排列</li><li>选取前K个点</li><li>返回前K个点中出现频率最高的类别</li></ol><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def classify0(inX,dataSet,labels,k):</span><br><span class="line"></span><br><span class="line">  # inX：用于分类的输入向量</span><br><span class="line"></span><br><span class="line">  # dataSet：输入的训练样本集，一行为一个样本</span><br><span class="line"></span><br><span class="line">  # labels：标签向量</span><br><span class="line"></span><br><span class="line">  # k：数目</span><br><span class="line"></span><br><span class="line">  dataSetSize &#x3D; dataSet.shape[0] # 获得行数，shape获得矩阵尺寸</span><br><span class="line"></span><br><span class="line">  diffMat &#x3D; tile(inX,(dataSetSize,1)) - dataSet # 纵向扩展</span><br><span class="line"></span><br><span class="line">  sqDiffMat &#x3D; diffMat**2</span><br><span class="line"></span><br><span class="line">  sqDistances &#x3D; sqDiffMat.sum(axis&#x3D;1) #行向量相加</span><br><span class="line"></span><br><span class="line">  distances &#x3D; sqDistances**0.5 #真实距离</span><br><span class="line"></span><br><span class="line">  sortedDistIndicies &#x3D; distances.argsort() # argsort：排序，并返回排序后元素排序前位置</span><br><span class="line"></span><br><span class="line">  classCount &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">  for i in range(k):</span><br><span class="line"></span><br><span class="line">     voteIlabel &#x3D; labels[sortedDistIndicies[i]] # 找到前k个对应的标签</span><br><span class="line"></span><br><span class="line">     classCount[voteIlabel] &#x3D; classCount.get(voteIlabel,0) + 1</span><br><span class="line"></span><br><span class="line">     # 检索字典内对应的值，若不存在，则创建并将值设为0</span><br><span class="line"></span><br><span class="line">     # 通过+1来设定频率</span><br><span class="line"></span><br><span class="line">  sortedClassCount &#x3D; sorted(classCount.items(),</span><br><span class="line"></span><br><span class="line">                key&#x3D;operator.itemgetter(1),reverse &#x3D; True)</span><br><span class="line"></span><br><span class="line">  # 由于是字典格式，因此要用items转换为列表格式</span><br><span class="line"></span><br><span class="line">  # itemgetter：定义函数，获取第m位置上的值，用于key上，以实现对于频率的排序</span><br><span class="line"></span><br><span class="line">  return sortedClassCount[0][0]</span><br></pre></td></tr></table></figure><h3 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3.实际应用"></a>3.实际应用</h3><h4 id="3-1-利用K-近邻算法改进约会网站配对效果"><a href="#3-1-利用K-近邻算法改进约会网站配对效果" class="headerlink" title="3.1 利用K-近邻算法改进约会网站配对效果"></a>3.1 利用K-近邻算法改进约会网站配对效果</h4><h5 id="3-1-1-目的：根据三种特征（每年获得的飞行常客里程数、玩视频游戏所消耗时间百分比、每周消费的冰淇淋公升数）来评判交往对象具有魅力的程度。"><a href="#3-1-1-目的：根据三种特征（每年获得的飞行常客里程数、玩视频游戏所消耗时间百分比、每周消费的冰淇淋公升数）来评判交往对象具有魅力的程度。" class="headerlink" title="3.1.1 目的：根据三种特征（每年获得的飞行常客里程数、玩视频游戏所消耗时间百分比、每周消费的冰淇淋公升数）来评判交往对象具有魅力的程度。"></a>3.1.1 目的：根据三种特征（每年获得的飞行常客里程数、玩视频游戏所消耗时间百分比、每周消费的冰淇淋公升数）来评判交往对象具有魅力的程度。</h5><h5 id="3-1-2-代码实现"><a href="#3-1-2-代码实现" class="headerlink" title="3.1.2 代码实现"></a>3.1.2 代码实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"># 利用K-近邻算法改进约会网站配对效果</span><br><span class="line">from numpy import *</span><br><span class="line">import operator</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D</span><br><span class="line">plt.rcParams[&#39;font.sans-serif&#39;]&#x3D;[&#39;SimHei&#39;]</span><br><span class="line">plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def file2matrix(filename):</span><br><span class="line">    fr &#x3D; open(filename)</span><br><span class="line">    arrayOLines &#x3D; fr.readlines() # 读取所有行</span><br><span class="line">    numberOfLines &#x3D; len(arrayOLines) # 行数</span><br><span class="line">    returnMat &#x3D; zeros((numberOfLines,3))</span><br><span class="line">    classLabelVector &#x3D; []</span><br><span class="line">    index &#x3D; 0</span><br><span class="line">    for line in arrayOLines: # 依次读取</span><br><span class="line">        line &#x3D; line.strip() # 删除头尾字符</span><br><span class="line">        listFromLine &#x3D; line.split(&#39;\t&#39;) # 用\t分隔</span><br><span class="line">        returnMat[index,:] &#x3D; listFromLine[0:3] # 数据输入</span><br><span class="line">        classLabelVector.append(int(listFromLine[-1])) # 保存标签</span><br><span class="line">        index +&#x3D; 1</span><br><span class="line">    return returnMat,classLabelVector</span><br><span class="line"></span><br><span class="line">def autoNorm(dataSet):</span><br><span class="line">    minVals &#x3D; dataSet.min(0) # 0列 1行</span><br><span class="line">    maxVals &#x3D; dataSet.max(0)</span><br><span class="line">    ranges &#x3D; maxVals - minVals</span><br><span class="line">    normDataSet &#x3D; zeros(shape(dataSet))</span><br><span class="line">    m &#x3D; dataSet.shape[0] # 获取行数</span><br><span class="line">    normDataSet &#x3D; dataSet - tile(minVals,(m,1)) # 减去均值</span><br><span class="line">    normDataSet &#x3D; normDataSet&#x2F;tile(ranges,(m,1))</span><br><span class="line">    return normDataSet,ranges,minVals</span><br><span class="line"></span><br><span class="line">def classify0(inX,dataSet,labels,k):</span><br><span class="line">    # inX：用于分类的输入向量</span><br><span class="line">    # dataSet：输入的训练样本集，一行为一个样本</span><br><span class="line">    # labels：标签向量</span><br><span class="line">    # k：数目</span><br><span class="line">    dataSetSize &#x3D; dataSet.shape[0] # 获得行数，shape获得矩阵尺寸</span><br><span class="line">    diffMat &#x3D; tile(inX,(dataSetSize,1)) - dataSet # 纵向扩展</span><br><span class="line">    sqDiffMat &#x3D; diffMat**2</span><br><span class="line">    sqDistances &#x3D; sqDiffMat.sum(axis&#x3D;1) #行向量相加</span><br><span class="line">    distances &#x3D; sqDistances**0.5 #真实距离</span><br><span class="line">    sortedDistIndicies &#x3D; distances.argsort() # argsort：排序，并返回排序后元素排序前位置</span><br><span class="line">    classCount &#x3D; &#123;&#125;</span><br><span class="line">    for i in range(k):</span><br><span class="line">        voteIlabel &#x3D; labels[sortedDistIndicies[i]] # 找到前k个对应的标签</span><br><span class="line">        classCount[voteIlabel] &#x3D; classCount.get(voteIlabel,0) + 1</span><br><span class="line">        # 检索字典内对应的值，若不存在，则创建并将值设为0</span><br><span class="line">        # 通过+1来设定频率</span><br><span class="line">    sortedClassCount &#x3D; sorted(classCount.items(),</span><br><span class="line">                              key&#x3D;operator.itemgetter(1),reverse &#x3D; True)</span><br><span class="line">    # 由于是字典格式，因此要用items转换为列表格式</span><br><span class="line">    #itemgetter：定义函数，获取第m位置上的值，用于key上，以实现对于频率的排序</span><br><span class="line"></span><br><span class="line">    return sortedClassCount[0][0]</span><br><span class="line"></span><br><span class="line">def datingClassTest():</span><br><span class="line">    # 分类器针对约会网站的测试代码</span><br><span class="line">    hoRatio &#x3D; 0.10 # 测试数量占比</span><br><span class="line">    datingDataMat,classLabelVector &#x3D; file2matrix(&#39;1.txt&#39;)</span><br><span class="line">    normMat,ranges,minVals &#x3D; autoNorm(datingDataMat)</span><br><span class="line">    m &#x3D; normMat.shape[0]</span><br><span class="line">    numTestVecs &#x3D; int(m*hoRatio) # 测试数量</span><br><span class="line">    # 1:numTestVecs 用于测试</span><br><span class="line">    # numTestVecs:end 用于训练</span><br><span class="line">    errorCount &#x3D; 0</span><br><span class="line">    for i in range(numTestVecs):</span><br><span class="line">        classifierResult &#x3D; classify0(normMat[i,:],normMat[numTestVecs:m,:],classLabelVector[numTestVecs:m],3)</span><br><span class="line">        print(&#39;the classifier came back with:%d,the real answer is:%d&#39;%(classifierResult,classLabelVector[i]))</span><br><span class="line">        if (classifierResult !&#x3D; classLabelVector[i]):</span><br><span class="line">            errorCount +&#x3D; 1</span><br><span class="line">    print(&#39;the total error rate is :%f&#39;%(errorCount&#x2F;float(numTestVecs)))</span><br><span class="line"></span><br><span class="line">def classifyPerson():</span><br><span class="line">    # 预测函数</span><br><span class="line">    resultList &#x3D; [&#39;not at all&#39;,&#39;in small doses&#39;,&#39;in large doses&#39;]</span><br><span class="line">    percentTats &#x3D; float(input(&#39;percentage of time spent playing video games?&#39;))</span><br><span class="line">    ffMiles &#x3D; float(input(&#39;percentage flier miles earned per year?&#39;))</span><br><span class="line">    iceCream &#x3D; float(input(&#39;liters of ice cream consumed per year?&#39;))</span><br><span class="line">    datingDataMat,datingLabels &#x3D; file2matrix(&#39;1.txt&#39;)</span><br><span class="line">    normMat,ranges,minVals &#x3D; autoNorm(datingDataMat)</span><br><span class="line">    inArr &#x3D; array([ffMiles,percentTats,iceCream])</span><br><span class="line">    classifierResult &#x3D; classify0((inArr-minVals)&#x2F;ranges,normMat,datingLabels,3)</span><br><span class="line">    print(&#39;You will probably like this person:&#39;,resultList[classifierResult-1])</span><br><span class="line"></span><br><span class="line">def drawScatter():</span><br><span class="line">    [datingDataMat, classLabelVector] &#x3D; file2matrix(&#39;1.txt&#39;)</span><br><span class="line">    fig &#x3D; plt.figure()</span><br><span class="line">    ax &#x3D; fig.add_subplot(111)</span><br><span class="line">    plt.title(&quot;数据散点图&quot;)</span><br><span class="line">    plt.xlabel(&quot;每年获得的飞行常客里程数&quot;)</span><br><span class="line">    plt.ylabel(&quot;玩视频游戏所消耗时间百分比&quot;)</span><br><span class="line">    ax.scatter(datingDataMat[:, 0], datingDataMat[:, 1], 15.0 * array(classLabelVector),</span><br><span class="line">               15.0 * array(classLabelVector))  # 让标签来展示颜色和大小</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"># datingClassTest()</span><br><span class="line"># drawScatter()</span><br><span class="line">classifyPerson()</span><br></pre></td></tr></table></figure><h4 id="3-2-利用K-近邻算法实现手写识别系统"><a href="#3-2-利用K-近邻算法实现手写识别系统" class="headerlink" title="3.2 利用K-近邻算法实现手写识别系统"></a>3.2 利用K-近邻算法实现手写识别系统</h4><h5 id="3-1-1-目的：识别手写体。"><a href="#3-1-1-目的：识别手写体。" class="headerlink" title="3.1.1 目的：识别手写体。"></a>3.1.1 目的：识别手写体。</h5><h5 id="3-1-2-代码实现-1"><a href="#3-1-2-代码实现-1" class="headerlink" title="3.1.2 代码实现"></a>3.1.2 代码实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># 使用K-近邻算法实现手写识别系统</span><br><span class="line">from numpy import *</span><br><span class="line">import operator</span><br><span class="line">from os import listdir</span><br><span class="line"></span><br><span class="line">def img2vector(filename,n):</span><br><span class="line">    # 图像转化为向量</span><br><span class="line">    # n*n --&gt; 1*n^2</span><br><span class="line">    # 32*32 --&gt; 1*1024</span><br><span class="line">    returnVect &#x3D; zeros((1,n**2))</span><br><span class="line">    fr &#x3D; open(filename)</span><br><span class="line">    for i in range(n):</span><br><span class="line">        lineStr &#x3D; fr.readline() # 读取1行</span><br><span class="line">        for j in range(n):</span><br><span class="line">            returnVect[0,n*i+j] &#x3D; int(lineStr[j])</span><br><span class="line">    return returnVect</span><br><span class="line"></span><br><span class="line">def classify0(inX,dataSet,labels,k):</span><br><span class="line">    # inX：用于分类的输入向量</span><br><span class="line">    # dataSet：输入的训练样本集，一行为一个样本</span><br><span class="line">    # labels：标签向量</span><br><span class="line">    # k：数目</span><br><span class="line">    dataSetSize &#x3D; dataSet.shape[0] # 获得行数，shape获得矩阵尺寸</span><br><span class="line">    diffMat &#x3D; tile(inX,(dataSetSize,1)) - dataSet # 纵向扩展</span><br><span class="line">    sqDiffMat &#x3D; diffMat**2</span><br><span class="line">    sqDistances &#x3D; sqDiffMat.sum(axis&#x3D;1) #行向量相加</span><br><span class="line">    distances &#x3D; sqDistances**0.5 #真实距离</span><br><span class="line">    sortedDistIndicies &#x3D; distances.argsort() # argsort：排序，并返回排序后元素排序前位置</span><br><span class="line">    classCount &#x3D; &#123;&#125;</span><br><span class="line">    for i in range(k):</span><br><span class="line">        voteIlabel &#x3D; labels[sortedDistIndicies[i]] # 找到前k个对应的标签</span><br><span class="line">        classCount[voteIlabel] &#x3D; classCount.get(voteIlabel,0) + 1</span><br><span class="line">        # 检索字典内对应的值，若不存在，则创建并将值设为0</span><br><span class="line">        # 通过+1来设定频率</span><br><span class="line">    sortedClassCount &#x3D; sorted(classCount.items(),</span><br><span class="line">                              key&#x3D;operator.itemgetter(1),reverse &#x3D; True)</span><br><span class="line">    # 由于是字典格式，因此要用items转换为列表格式</span><br><span class="line">    #itemgetter：定义函数，获取第m位置上的值，用于key上，以实现对于频率的排序</span><br><span class="line"></span><br><span class="line">    return sortedClassCount[0][0]</span><br><span class="line"></span><br><span class="line">def handwritingClassTest(n):</span><br><span class="line">    # 获取训练样本</span><br><span class="line">    hwLabels &#x3D; []</span><br><span class="line">    trainingFileList &#x3D; listdir(&#39;digits&#x2F;trainingDigits&#39;)</span><br><span class="line">    m &#x3D; len(trainingFileList) # 文件个数</span><br><span class="line">    trainingMat &#x3D; zeros((m,n**2))</span><br><span class="line">    for i in range(m):</span><br><span class="line">        fileNameStr &#x3D; trainingFileList[i]</span><br><span class="line">        fliestr &#x3D; fileNameStr.split(&#39;.&#39;)[0] # 文件名</span><br><span class="line">        classNumStr &#x3D; int(fliestr.split(&#39;_&#39;)[0]) # 获取标签</span><br><span class="line">        hwLabels.append(classNumStr)</span><br><span class="line">        trainingMat[i,:] &#x3D; img2vector(&#39;digits&#x2F;trainingDigits&#x2F;%s&#39;%fileNameStr,32)# 存储特征</span><br><span class="line">    # 测试</span><br><span class="line">    testFileList &#x3D; listdir(&#39;digits&#x2F;testDigits&#39;)</span><br><span class="line">    errorCount &#x3D; 0</span><br><span class="line">    mTest &#x3D; len(testFileList)</span><br><span class="line">    for i in range(mTest):</span><br><span class="line">        fileNameStr &#x3D; testFileList[i]</span><br><span class="line">        fliestr &#x3D; fileNameStr.split(&#39;.&#39;)[0]  # 文件名</span><br><span class="line">        classNumStr &#x3D; int(fliestr.split(&#39;_&#39;)[0])  # 获取标签</span><br><span class="line">        vectorUnderTest &#x3D; img2vector(&#39;digits&#x2F;testDigits&#x2F;%s&#39; % fileNameStr, 32)</span><br><span class="line">        classifiterResult &#x3D; classify0(vectorUnderTest,trainingMat,hwLabels,3)</span><br><span class="line">        print(&#39;the classifier came back with :%d, the real answer is :%d&#39;%(classifiterResult,classNumStr))</span><br><span class="line">        if (classifiterResult!&#x3D; classNumStr):</span><br><span class="line">            errorCount +&#x3D; 1</span><br><span class="line">    print(&#39;the total number of error is %d&#39;%errorCount)</span><br><span class="line">    print(&#39;the total error tate is %f&#39;%(errorCount&#x2F;float(mTest)))</span><br><span class="line"></span><br><span class="line">x &#x3D; img2vector(&#39;digits&#x2F;trainingDigits&#x2F;0_1.txt&#39;,32)</span><br><span class="line">handwritingClassTest(32)</span><br></pre></td></tr></table></figure><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h3><p>K-近邻算法不以距离最近的点作为判断类别条件，而是选取一定范围内出现频率最高者</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1.算法描述&quot;&gt;&lt;/a&gt;1.算法描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;计算已知训练集中各点距离该测试点距离（2-范数）&lt;/li&gt;
&lt;li&gt;按照所得距离增序排列&lt;/li</summary>
      
    
    
    
    <category term="机器学习" scheme="https://ambitionfy.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="https://ambitionfy.github.io/tags/Python/"/>
    
    <category term="机器学习" scheme="https://ambitionfy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
